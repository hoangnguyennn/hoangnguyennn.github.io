{"version":3,"sources":["assets/images/check-all.svg","components/Header/index.js","assets/images/check.svg","assets/images/checked.svg","components/ListItem/index.js","constants/index.js","components/Footer/index.js","assets/images/close.svg","App.js","serviceWorker.js","index.js"],"names":["inputRef","createRef","Header","addTodo","newTodoTitleChange","allItemClick","newItem","useEffect","current","focus","className","src","checkAll","alt","onClick","type","placeholder","value","onChange","onKeyUp","ref","ListItem","item","changeTodoStatus","img","isCompleted","checked","check","classnames","title","initialTodos","FILTER_TYPES","KEYS","Footer","counter","selected","filterAll","filterActive","filterCompleted","clearCompleted","App","useState","setNewItem","todos","setTodos","filterType","setFilterType","todosFiltered","todosUnCompleted","todosCompleted","useMemo","filter","todo","ListGroup","ListGroupItem","event","key","titleTrimed","target","replace","trim","length","hasItemUncompleted","some","map","index","slice","close","deleteTodo","clearTodosCompleted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAAe,G,YAAA,IAA0B,uC,OCOnCA,EAAWC,sBA6BFC,EA3BA,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,mBAAoBC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QAK3D,OAJAC,qBAAU,WACRP,EAASQ,QAAQC,UAChB,IAGD,sBAAKC,UAAU,aAAf,UACE,qBAAKC,IAAKC,EAAUC,IAAI,GAAGC,QAAST,IACpC,uBACEU,KAAK,OACLC,YAAY,kDACZC,MAAOX,EACPY,SAAUd,EACVe,QAAShB,EACTiB,IAAKpB,Q,gBCvBE,G,MAAA,IAA0B,mCCA1B,MAA0B,oCC+B1BqB,EAvBE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAClBC,EAAMF,EAAKG,YAAcC,EAAUC,EAEzC,OACE,sBACEjB,UAAWkB,IAAW,OAAQ,CAC5B,gBAAiBN,EAAKG,cAF1B,UAKE,qBAAKd,IAAKa,EAAKX,IAAI,GAAGC,QAASS,IAC/B,8BAAMD,EAAKO,YClBJC,G,MAAe,CAC1B,CAAED,MAAO,UAAMJ,aAAa,GAC5B,CAAEI,MAAO,WAAOJ,aAAa,GAC7B,CAAEI,MAAO,OAAQJ,aAAa,KAGnBM,EACN,MADMA,EAEH,SAFGA,EAGA,YAGAC,EACJ,QCmDMC,EAzDA,SAAC,GAOT,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,SACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEA,OACE,sBAAK7B,UAAU,SAAf,UACE,uBAAMA,UAAU,aAAhB,UACE,sBAAMA,UAAU,UAAhB,SAA2BwB,IAC3B,sBAAMxB,UAAU,OAAhB,SAAwBwB,EAAU,EAAI,OAAS,UAC/C,sBAAMxB,UAAU,OAAhB,qBAEF,qBAAIA,UAAU,SAAd,UACE,oBACEA,UAAWkB,IAAW,MAAO,CAC3BO,SAAUA,IAAaJ,IAEzBjB,QAASsB,EAJX,iBAQA,oBACE1B,UAAWkB,IAAW,SAAU,CAC9BO,SAAUA,IAAaJ,IAEzBjB,QAASuB,EAJX,oBAQA,oBACE3B,UAAWkB,IAAW,YAAa,CACjCO,SAAUA,IAAaJ,IAEzBjB,QAASwB,EAJX,0BASF,wBAAQ5B,UAAU,kBAAkBI,QAASyB,EAA7C,iCChDS,MAA0B,kCCgI1BC,EAnHH,WACV,IA2E6BzB,EA3E7B,EAA8B0B,mBAAS,IAAvC,mBAAOnC,EAAP,KAAgBoC,EAAhB,KACA,EAA0BD,mBAASX,GAAnC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAAoCH,mBAASV,GAA7C,mBAAOc,EAAP,KAAmBC,EAAnB,KAkDMC,EAAgB,SAAAhC,GACpB,OAAQA,GACN,KAAKgB,EACH,OAAOY,EACT,KAAKZ,EACH,OAAOiB,EACT,KAAKjB,EACH,OAAOkB,EACT,QACE,OAAON,IAIPM,EAAiBC,mBACrB,kBAAMP,EAAMQ,QAAO,SAAAC,GAAI,OAAIA,EAAK3B,iBAChC,CAACkB,IAGGK,EAAmBE,mBACvB,kBAAMP,EAAMQ,QAAO,SAAAC,GAAI,OAAKA,EAAK3B,iBACjC,CAACkB,IAOH,OACE,qBAAKjC,UAAU,MAAf,SACE,eAAC2C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,CACEnD,QAhFM,SAAAoD,GACd,GAAIA,EAAMC,MAAQxB,EAAY,CAC5B,IACMyB,EADQF,EAAMG,OAAOzC,MACD0C,QAAQ,OAAQ,KAAKC,OAEpB,IAAvBH,EAAYI,SACdjB,GAAS,SAAAD,GAAK,4BACTA,GADS,CAEZ,CAAEd,MAAO4B,EAAahC,aAAa,QAGrCiB,EAAW,OAsEPtC,mBAjEiB,SAAAmD,GACzBb,EAAWa,EAAMG,OAAOzC,QAiEhBZ,aA1DW,WACnB,IALwBoB,EAKpBqC,EAAqBnB,EAAMoB,MAAK,SAAAX,GAAI,OAAKA,EAAK3B,eAL1BA,EAMNqC,EALlBlB,GAAS,SAAAD,GAAK,OAAIA,EAAMqB,KAAI,SAAAZ,GAAI,kCAAUA,GAAV,IAAgB3B,uBA8DxCnB,QAASA,MAGZyC,EAAcF,GAAYmB,KAAI,SAAC1C,EAAM2C,GAAP,OAC7B,eAACX,EAAA,EAAD,WACE,cAAC,EAAD,CACEhC,KAAMA,EACNC,iBAAkB,kBAzDL,SAAA0C,GACvBrB,GAAS,SAAAD,GAAK,4BACTA,EAAMuB,MAAM,EAAGD,IADN,4BAGPtB,EAAMsB,IAHC,IAIVxC,aAAckB,EAAMsB,GAAOxC,eAJjB,YAMTkB,EAAMuB,MAAMD,EAAQ,QAkDS1C,CAAiB0C,MAE3C,qBAAKtD,IAAKwD,EAAOtD,IAAI,GAAGC,QAAS,kBAhDxB,SAAAmD,GACjBrB,GAAS,SAAAD,GAAK,4BAAQA,EAAMuB,MAAM,EAAGD,IAAvB,YAAkCtB,EAAMuB,MAAMD,EAAQ,QA+CrBG,CAAWH,QALhCA,MAQtB,cAACX,EAAA,EAAD,UACE,cAAC,EAAD,CACEpB,SA1BmBnB,EA0BWgB,EAzB/BgB,EAAchC,GAAM8C,QA0BnB1B,SAAUU,EACVT,UAAW,kBAAMU,EAAcf,IAC/BM,aAAc,kBAAMS,EAAcf,IAClCO,gBAAiB,kBAAMQ,EAAcf,IACrCsC,oBAzEkB,WAC1BzB,GAAS,SAAAD,GAAK,OAAIA,EAAMQ,QAAO,SAAAC,GAAI,OAAKA,EAAK3B,6BCpC7B6C,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZHC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GACnCA,EAAaC,kB","file":"static/js/main.edee6899.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/check-all.62cd43fe.svg\";","import { createRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.css';\n\nimport checkAll from '../../assets/images/check-all.svg';\n\nconst inputRef = createRef();\n\nconst Header = ({ addTodo, newTodoTitleChange, allItemClick, newItem }) => {\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  return (\n    <div className=\"top-search\">\n      <img src={checkAll} alt=\"\" onClick={allItemClick} />\n      <input\n        type=\"text\"\n        placeholder=\"Điều gì bạn muốn làm?\"\n        value={newItem}\n        onChange={newTodoTitleChange}\n        onKeyUp={addTodo}\n        ref={inputRef}\n      />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  addTodo: PropTypes.func,\n  newTodoTitleChange: PropTypes.func,\n  allItemClick: PropTypes.func,\n  newItem: PropTypes.string,\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/check.4ad3b5f0.svg\";","export default __webpack_public_path__ + \"static/media/checked.a7e9a3da.svg\";","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './style.css';\n\nimport check from '../../assets/images/check.svg';\nimport checked from '../../assets/images/checked.svg';\n\nconst ListItem = ({ item, changeTodoStatus }) => {\n  const img = item.isCompleted ? checked : check;\n\n  return (\n    <div\n      className={classnames('item', {\n        'item-complete': item.isCompleted,\n      })}\n    >\n      <img src={img} alt=\"\" onClick={changeTodoStatus} />\n      <div>{item.title}</div>\n    </div>\n  );\n};\n\nListItem.propTypes = {\n  item: PropTypes.shape({\n    title: PropTypes.string,\n    isCompleted: PropTypes.bool,\n  }),\n  changeTodoStatus: PropTypes.func,\n};\n\nexport default ListItem;\n","export const initialTodos = [\n  { title: 'Ăn', isCompleted: false },\n  { title: 'Ngủ', isCompleted: false },\n  { title: 'Code', isCompleted: true },\n];\n\nexport const FILTER_TYPES = {\n  ALL: 'ALL',\n  ACTIVE: 'ACTIVE',\n  COMPLETED: 'COMPLETED',\n};\n\nexport const KEYS = {\n  ENTER: 'Enter',\n};\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './style.css';\n\nimport { FILTER_TYPES } from '../../constants';\n\nconst Footer = ({\n  counter,\n  selected,\n  filterAll,\n  filterActive,\n  filterCompleted,\n  clearCompleted,\n}) => {\n  return (\n    <div className=\"footer\">\n      <span className=\"todo-count\">\n        <span className=\"counter\">{counter}</span>\n        <span className=\"item\">{counter < 2 ? 'item' : 'items'}</span>\n        <span className=\"left\">left</span>\n      </span>\n      <ul className=\"filter\">\n        <li\n          className={classnames('all', {\n            selected: selected === FILTER_TYPES.ALL,\n          })}\n          onClick={filterAll}\n        >\n          All\n        </li>\n        <li\n          className={classnames('active', {\n            selected: selected === FILTER_TYPES.ACTIVE,\n          })}\n          onClick={filterActive}\n        >\n          Active\n        </li>\n        <li\n          className={classnames('completed', {\n            selected: selected === FILTER_TYPES.COMPLETED,\n          })}\n          onClick={filterCompleted}\n        >\n          Completed\n        </li>\n      </ul>\n      <button className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </div>\n  );\n};\n\nFooter.propTypes = {\n  counter: PropTypes.number,\n  selected: PropTypes.string,\n  filterAll: PropTypes.func,\n  filterActive: PropTypes.func,\n  filterCompleted: PropTypes.func,\n  clearCompleted: PropTypes.func,\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/close.6076079d.svg\";","import { useMemo, useState } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\nimport './App.css';\n\nimport Header from './components/Header';\nimport ListItem from './components/ListItem';\nimport Footer from './components/Footer';\n\nimport close from './assets/images/close.svg';\n\nimport { initialTodos, FILTER_TYPES, KEYS } from './constants';\n\nconst App = () => {\n  const [newItem, setNewItem] = useState('');\n  const [todos, setTodos] = useState(initialTodos);\n  const [filterType, setFilterType] = useState(FILTER_TYPES.ALL);\n\n  const addTodo = event => {\n    if (event.key === KEYS.ENTER) {\n      const title = event.target.value;\n      const titleTrimed = title.replace(/\\s+/g, ' ').trim();\n\n      if (titleTrimed.length !== 0) {\n        setTodos(todos => [\n          ...todos,\n          { title: titleTrimed, isCompleted: false },\n        ]);\n\n        setNewItem('');\n      }\n    }\n  };\n\n  const newTodoTitleChange = event => {\n    setNewItem(event.target.value);\n  };\n\n  const changeTodosStatus = isCompleted => {\n    setTodos(todos => todos.map(todo => ({ ...todo, isCompleted })));\n  };\n\n  const allItemClick = () => {\n    let hasItemUncompleted = todos.some(todo => !todo.isCompleted);\n    changeTodosStatus(hasItemUncompleted);\n  };\n\n  const clearTodosCompleted = () => {\n    setTodos(todos => todos.filter(todo => !todo.isCompleted));\n  };\n\n  const changeTodoStatus = index => {\n    setTodos(todos => [\n      ...todos.slice(0, index),\n      {\n        ...todos[index],\n        isCompleted: !todos[index].isCompleted,\n      },\n      ...todos.slice(index + 1),\n    ]);\n  };\n\n  const deleteTodo = index => {\n    setTodos(todos => [...todos.slice(0, index), ...todos.slice(index + 1)]);\n  };\n\n  const todosFiltered = type => {\n    switch (type) {\n      case FILTER_TYPES.ALL:\n        return todos;\n      case FILTER_TYPES.ACTIVE:\n        return todosUnCompleted;\n      case FILTER_TYPES.COMPLETED:\n        return todosCompleted;\n      default:\n        return todos;\n    }\n  };\n\n  const todosCompleted = useMemo(\n    () => todos.filter(todo => todo.isCompleted),\n    [todos]\n  );\n\n  const todosUnCompleted = useMemo(\n    () => todos.filter(todo => !todo.isCompleted),\n    [todos]\n  );\n\n  const todosFilteredCounter = type => {\n    return todosFiltered(type).length;\n  };\n\n  return (\n    <div className=\"app\">\n      <ListGroup>\n        <ListGroupItem>\n          <Header\n            addTodo={addTodo}\n            newTodoTitleChange={newTodoTitleChange}\n            allItemClick={allItemClick}\n            newItem={newItem}\n          />\n        </ListGroupItem>\n        {todosFiltered(filterType).map((item, index) => (\n          <ListGroupItem key={index}>\n            <ListItem\n              item={item}\n              changeTodoStatus={() => changeTodoStatus(index)}\n            />\n            <img src={close} alt=\"\" onClick={() => deleteTodo(index)} />\n          </ListGroupItem>\n        ))}\n        <ListGroupItem>\n          <Footer\n            counter={todosFilteredCounter(FILTER_TYPES.ACTIVE)}\n            selected={filterType}\n            filterAll={() => setFilterType(FILTER_TYPES.ALL)}\n            filterActive={() => setFilterType(FILTER_TYPES.ACTIVE)}\n            filterCompleted={() => setFilterType(FILTER_TYPES.COMPLETED)}\n            clearTodosCompleted={clearTodosCompleted}\n          />\n        </ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["constants/index.ts","redux/reducers/index.ts","components/IrregularVerbsTable/index.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["verbs","infinitive","simplePast","pastParticiple","rootSlice","createSlice","name","initialState","items","hasError","message","reducers","setIrregularVerbsSuccess","state","action","payload","setIrregularVerbsFailed","actions","fetchIrregularVerbs","dispatch","a","data","IrregularVerbsTable","search","useState","input","setInput","useDispatch","useSelector","createSelector","filter","item","includes","useEffect","className","Form","Group","controlId","Control","type","placeholder","value","onChange","e","target","Table","striped","bordered","hover","variant","map","verb","index","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc6cfb35.chunk.js","sourcesContent":["import { Verb } from '../interfaces';\n\nconst verbs: Verb[] = [\n  { infinitive: 'be', simplePast: 'was/were', pastParticiple: 'been' },\n  { infinitive: 'I am', simplePast: 'I was', pastParticiple: 'I have been' },\n  { infinitive: 'he is', simplePast: 'he was', pastParticiple: 'he has been' },\n  {\n    infinitive: 'we are',\n    simplePast: 'we were',\n    pastParticiple: 'we have been'\n  },\n  { infinitive: 'beat', simplePast: 'beat', pastParticiple: 'beaten' },\n  { infinitive: 'become', simplePast: 'became', pastParticiple: 'become' },\n  { infinitive: 'begin', simplePast: 'began', pastParticiple: 'begun' },\n  { infinitive: 'bet*', simplePast: 'bet', pastParticiple: 'bet' },\n  { infinitive: 'blow', simplePast: 'blew', pastParticiple: 'blown' },\n  { infinitive: 'break', simplePast: 'broke', pastParticiple: 'broken' },\n  { infinitive: 'bring', simplePast: 'brought', pastParticiple: 'brought' },\n  { infinitive: 'build', simplePast: 'built', pastParticiple: 'built' },\n  { infinitive: 'burst', simplePast: 'burst', pastParticiple: 'burst' },\n  { infinitive: 'buy', simplePast: 'bought', pastParticiple: 'bought' },\n  { infinitive: 'catch', simplePast: 'caught', pastParticiple: 'caught' },\n  { infinitive: 'choose', simplePast: 'chose', pastParticiple: 'chosen' },\n  { infinitive: 'come', simplePast: 'came', pastParticiple: 'come' },\n  { infinitive: 'cost', simplePast: 'cost', pastParticiple: 'cost' },\n  { infinitive: 'cut', simplePast: 'cut', pastParticiple: 'cut' },\n  { infinitive: 'deal', simplePast: 'dealt', pastParticiple: 'dealt' },\n  { infinitive: 'do', simplePast: 'did', pastParticiple: 'done' },\n  { infinitive: 'draw', simplePast: 'drew', pastParticiple: 'drawn' },\n  { infinitive: 'drink', simplePast: 'drank', pastParticiple: 'drunk' },\n  { infinitive: 'drive', simplePast: 'drove', pastParticiple: 'driven' },\n  { infinitive: 'eat', simplePast: 'ate', pastParticiple: 'eaten' },\n  { infinitive: 'fall', simplePast: 'fell', pastParticiple: 'fallen' },\n  { infinitive: 'feed', simplePast: 'fed', pastParticiple: 'fed' },\n  { infinitive: 'feel', simplePast: 'felt', pastParticiple: 'felt' },\n  { infinitive: 'fight', simplePast: 'fought', pastParticiple: 'fought' },\n  { infinitive: 'find', simplePast: 'found', pastParticiple: 'found' },\n  { infinitive: 'fly', simplePast: 'flew', pastParticiple: 'flown' },\n  { infinitive: 'forget', simplePast: 'forgot', pastParticiple: 'forgotten' },\n  { infinitive: 'freeze', simplePast: 'froze', pastParticiple: 'frozen' },\n  {\n    infinitive: 'get',\n    simplePast: 'got',\n    pastParticiple: 'got, gotten (American English)'\n  },\n  { infinitive: 'give', simplePast: 'gave', pastParticiple: 'given' },\n  { infinitive: 'go', simplePast: 'went', pastParticiple: 'gone' },\n  { infinitive: 'grow', simplePast: 'grew', pastParticiple: 'grown' },\n  { infinitive: 'hang', simplePast: 'hung', pastParticiple: 'hung' },\n  { infinitive: 'have', simplePast: 'had', pastParticiple: 'had' },\n  { infinitive: 'hear', simplePast: 'heard', pastParticiple: 'heard' },\n  { infinitive: 'hide', simplePast: 'hid', pastParticiple: 'hidden' },\n  { infinitive: 'hit', simplePast: 'hit', pastParticiple: 'hit' },\n  { infinitive: 'hold', simplePast: 'held', pastParticiple: 'held' },\n  { infinitive: 'hurt', simplePast: 'hurt', pastParticiple: 'hurt' },\n  { infinitive: 'keep', simplePast: 'kept', pastParticiple: 'kept' },\n  { infinitive: 'know', simplePast: 'knew', pastParticiple: 'known' },\n  { infinitive: 'lay', simplePast: 'laid', pastParticiple: 'laid' },\n  { infinitive: 'lead', simplePast: 'led', pastParticiple: 'led' },\n  { infinitive: 'leave', simplePast: 'left', pastParticiple: 'left' },\n  { infinitive: 'lend', simplePast: 'lent', pastParticiple: 'lent' },\n  { infinitive: 'let', simplePast: 'let', pastParticiple: 'let' },\n  { infinitive: 'lie**', simplePast: 'lay', pastParticiple: 'lain' },\n  { infinitive: 'light*', simplePast: 'lit', pastParticiple: 'lit' },\n  { infinitive: 'lose', simplePast: 'lost', pastParticiple: 'lost' },\n  { infinitive: 'make', simplePast: 'made', pastParticiple: 'made' },\n  { infinitive: 'mean', simplePast: 'meant', pastParticiple: 'meant' },\n  { infinitive: 'meet', simplePast: 'met', pastParticiple: 'met' },\n  { infinitive: 'pay', simplePast: 'paid', pastParticiple: 'paid' },\n  { infinitive: 'put', simplePast: 'put', pastParticiple: 'put' },\n  { infinitive: 'read', simplePast: 'read', pastParticiple: 'read' },\n  { infinitive: 'ride', simplePast: 'rode', pastParticiple: 'ridden' },\n  { infinitive: 'ring', simplePast: 'rang', pastParticiple: 'rung' },\n  { infinitive: 'rise', simplePast: 'rose', pastParticiple: 'risen' },\n  { infinitive: 'run', simplePast: 'ran', pastParticiple: 'run' },\n  { infinitive: 'say', simplePast: 'said', pastParticiple: 'said' },\n  { infinitive: 'see', simplePast: 'saw', pastParticiple: 'seen' },\n  { infinitive: 'sell', simplePast: 'sold', pastParticiple: 'sold' },\n  { infinitive: 'send', simplePast: 'sent', pastParticiple: 'sent' },\n  { infinitive: 'set', simplePast: 'set', pastParticiple: 'set' },\n  { infinitive: 'shake', simplePast: 'shook', pastParticiple: 'shaken' },\n  { infinitive: 'steal', simplePast: 'stole', pastParticiple: 'stolen' },\n  { infinitive: 'shine', simplePast: 'shone', pastParticiple: 'shone' },\n  { infinitive: 'shoot', simplePast: 'shot', pastParticiple: 'shot' },\n  { infinitive: 'show*', simplePast: 'showed', pastParticiple: 'shown' },\n  { infinitive: 'shut', simplePast: 'shut', pastParticiple: 'shut' },\n  { infinitive: 'sing', simplePast: 'sang', pastParticiple: 'sung' },\n  { infinitive: 'sink', simplePast: 'sank', pastParticiple: 'sunk' },\n  { infinitive: 'sit', simplePast: 'sat', pastParticiple: 'sat' },\n  { infinitive: 'sleep', simplePast: 'slept', pastParticiple: 'slept' },\n  { infinitive: 'slide', simplePast: 'slid', pastParticiple: 'slid' },\n  { infinitive: 'speak', simplePast: 'spoke', pastParticiple: 'spoken' },\n  { infinitive: 'spend', simplePast: 'spent', pastParticiple: 'spent' },\n  { infinitive: 'spring', simplePast: 'sprang', pastParticiple: 'sprung' },\n  { infinitive: 'stand', simplePast: 'stood', pastParticiple: 'stood' },\n  { infinitive: 'stick', simplePast: 'stuck', pastParticiple: 'stuck' },\n  { infinitive: 'swear', simplePast: 'swore', pastParticiple: 'sworn' },\n  { infinitive: 'sweep', simplePast: 'swept', pastParticiple: 'swept' },\n  { infinitive: 'swim', simplePast: 'swam', pastParticiple: 'swum' },\n  { infinitive: 'swing', simplePast: 'swung', pastParticiple: 'swung' },\n  { infinitive: 'take', simplePast: 'took', pastParticiple: 'taken' },\n  { infinitive: 'teach', simplePast: 'taught', pastParticiple: 'taught' },\n  { infinitive: 'tear', simplePast: 'tore', pastParticiple: 'torn' },\n  { infinitive: 'tell', simplePast: 'told', pastParticiple: 'told' },\n  { infinitive: 'think', simplePast: 'thought', pastParticiple: 'thought' },\n  { infinitive: 'throw', simplePast: 'threw', pastParticiple: 'thrown' },\n  {\n    infinitive: 'understand',\n    simplePast: 'understood',\n    pastParticiple: 'understood'\n  },\n  { infinitive: 'wake*', simplePast: 'woke', pastParticiple: 'woken' },\n  { infinitive: 'wear', simplePast: 'wore', pastParticiple: 'worn' },\n  { infinitive: 'weave', simplePast: 'wove', pastParticiple: 'woven' },\n  { infinitive: 'win', simplePast: 'won', pastParticiple: 'won' }\n];\n\nexport default verbs;\n","import {\n  createSelector,\n  createSlice,\n  Dispatch,\n  PayloadAction\n} from '@reduxjs/toolkit';\n\nimport {\n  RootState,\n  SetIrregularVerbsFailedAction,\n  SetIrregularVerbsSuccessAction,\n  Verb\n} from '../../interfaces';\n\nimport data from '../../constants/index';\n\nconst initialState: RootState = {\n  items: [],\n  hasError: false,\n  message: ''\n};\n\nconst rootSlice = createSlice({\n  name: 'root',\n  initialState,\n  reducers: {\n    setIrregularVerbsSuccess(\n      state,\n      action: PayloadAction<SetIrregularVerbsSuccessAction>\n    ) {\n      state.items = action.payload.items as Verb[];\n      state.hasError = false;\n      state.message = action.payload.message || '';\n    },\n    setIrregularVerbsFailed(\n      state,\n      action: PayloadAction<SetIrregularVerbsFailedAction>\n    ) {\n      state.hasError = true;\n      state.message = action.payload.message || '';\n    }\n  }\n});\n\nconst { setIrregularVerbsSuccess } = rootSlice.actions;\n\nconst fetchIrregularVerbs = async (dispatch: Dispatch) => {\n  dispatch(setIrregularVerbsSuccess({ items: data, message: 'Successfully' }));\n};\n\nconst getIrregularVerbsSelector = (search: string) =>\n  createSelector(\n    (state: RootState) => state,\n    (state: RootState) =>\n      state.items.filter((item) => {\n        return (\n          item.infinitive.includes(search) ||\n          item.simplePast.includes(search) ||\n          item.pastParticiple.includes(search)\n        );\n      })\n  );\n\nexport { fetchIrregularVerbs, getIrregularVerbsSelector };\nexport default rootSlice.reducer;\n","import { FC, useEffect, useState } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchIrregularVerbs,\n  getIrregularVerbsSelector\n} from '../../redux/reducers';\n\nconst IrregularVerbsTable: FC = () => {\n  const [input, setInput] = useState('');\n  const dispatch = useDispatch();\n  const data = useSelector(getIrregularVerbsSelector(input));\n\n  useEffect(() => {\n    fetchIrregularVerbs(dispatch);\n  }, [dispatch]);\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-end mb-2 mt-2\">\n        <span className=\"text-muted font-italic\">\n          * regular form (+ -ed) also possible.\n        </span>\n        <Form.Group controlId=\"search\" className=\"mb-0\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter something...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n        </Form.Group>\n      </div>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>infinitive</th>\n            <th>Simple past</th>\n            <th>Past participle</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((verb, index) => (\n            <tr key={index}>\n              <td>{index + 1}</td>\n              <td>{verb.infinitive}</td>\n              <td>{verb.simplePast}</td>\n              <td>{verb.pastParticiple}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default IrregularVerbsTable;\n","import Container from 'react-bootstrap/Container';\n\nimport IrregularVerbsTable from './components/IrregularVerbsTable';\n\nconst App = () => {\n  return (\n    <Container>\n      {/* <AddNewVerbForm /> */}\n      <IrregularVerbsTable />\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport rootReducer from './reducers';\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({ reducer: rootReducer });\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport store from './redux/store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}